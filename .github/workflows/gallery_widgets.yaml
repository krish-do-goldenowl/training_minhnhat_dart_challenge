name: Gallery Widgets ACTIONS
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./gallery_widgets
      
    steps:
      - name: clean git
        run: |
          if (Test-Path -Path '.git') {
            Remove-Item '.git' -Recurse -Force
          }
        shell: pwsh

      - uses: actions/checkout@v3
        with: 
          fetch-depth: '0'
      - uses: actions/setup-java@v3
        with:
          distribution: "oracle"
          java-version: "17"
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      # - name: Decrypt key.properties
      #   env:
      #     KEY_PROPERTIES: ${{ secrets.KEY_PROPERTIES }}
      #   # run: echo "$KEY_PROPERTIES" | base64 --decode > android/key.properties
      #   run: echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties && echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties && echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties && echo "storeFile=${{ secrets.STORE_FILE }}" >> android/key.properties
      
      # --- Flutter Build ---
      - id: flutter-build
        name: Flutter Build
        run: |
          $buildCommands = 'apk'

          $isRelease = '${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' && github.event_name == 'push' }}'

          $env:GIT_REDIRECT_STDERR = '2>&1'
          $lastRelease = $(git tag | sort -V | tail -1)

          Write-Host "lastRelease: $lastRelease"

          if (!$lastRelease) {
            $lastRelease = "1.0.0"
          }

          $lastReleaseSemVer = [System.Management.Automation.SemanticVersion]$lastRelease

          if ($isRelease -eq 'true') {
            $lastReleaseVersionString = $lastReleaseSemVer.ToString()
            Write-Host "name=last-version::$lastReleaseVersionString" >> $GITHUB_OUTPUT
            $version = [System.Management.Automation.SemanticVersion]::New($lastReleaseSemVer.Major, $lastReleaseSemVer.Minor, $lastReleaseSemVer.Patch + 1)
          } else {
            $version = [System.Management.Automation.SemanticVersion]::New($lastReleaseSemVer.Major, $lastReleaseSemVer.Minor, $lastReleaseSemVer.Patch, "preview.${{ github.event.number }}")
          }

          $versionString = $version.ToString()

          Write-Host "Building $buildCommands $versionString"

          flutter build $buildCommands --release --build-name $versionString --build-number '${{ github.run_number }}'
          Write-Host "name=version::$versionString" >> $GITHUB_OUTPUT

          if ($isRelease -eq 'true') {
            git tag "$versionString" ${{ github.head_ref }}

            git push https://$env:username:$env:CI_TOKEN@github.com/${{ github.repository }}.git "$versionString"
          }
        shell: pwsh
        env:
          CI_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          username: 'maverick-go'
        working-directory: ${{ env.working-directory }}

      - name: setup firebase cli
        run: |
          npm install -g firebase-tools
          firebase --version
        shell: pwsh
        working-directory: ${{ env.working-directory }}

      # - name: Firebase App Distribution
      #   run: |
      #     $isRelease = '${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' && github.event_name == 'push' }}'

      #     Write-Host "Changelog for ${{ steps.flutter-build.outputs.version }}"

      #     New-Item changelog.txt

      #     if ($isRelease -eq 'true') {
      #       git branch --contains '${{ steps.flutter-build.outputs.last-version }}'
      #       git tags --contains '${{ steps.flutter-build.outputs.last-version }}'
      #       git --no-pager log --pretty=format:%s '${{ steps.flutter-build.outputs.last-version }}'..'${{ steps.flutter-build.outputs.version }}' > changelog.txt
      #     } else {
      #       git --no-pager log --pretty=format:%s ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changelog.txt
      #     }

      #     export GOOGLE_APPLICATION_CREDENTIALS=D:\Downloads/goldenowl-deploy-testing-cbba43e37012.json
      #     firebase appdistribution:distribute 'build/app/outputs/flutter-apk/app-release.apk' --app ${{ secrets.FIREBASE_APP_ID }} --serviceCredentialsFileContent '${{ secrets.CREDENTIAL_FILE_CONTENT }}' --groups "internal-tester" --release-notes-file changelog.txt
      #   shell: pwsh
      #   working-directory: ${{ env.working-directory }}
      

      - name: Pre Firebase App Distribution
        run: |
          $isRelease = '${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' && github.event_name == 'push' }}'

          Write-Host "Changelog for ${{ steps.flutter-build.outputs.version }}"

          New-Item changelog.txt

          if ($isRelease -eq 'true') {
            git branch --contains '${{ steps.flutter-build.outputs.last-version }}'
            git tags --contains '${{ steps.flutter-build.outputs.last-version }}'
            git --no-pager log --pretty=format:%s '${{ steps.flutter-build.outputs.last-version }}'..'${{ steps.flutter-build.outputs.version }}' > changelog.txt
          } else {
            git --no-pager log --pretty=format:%s ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changelog.txt
          }
        shell: pwsh
        # working-directory: ${{ env.working-directory }}

      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.5.1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: "internal-testers"
          # releaseNotesFile: gallery_widgets/changelog.txt
          file: "gallery_widgets/build/app/outputs/flutter-apk/app-release.apk"

  build-success:
    if: ${{ github.ref != 'refs/heads/main' || github.base_ref != 'main' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run: echo success!